#!/usr/bin/python3
"Application to track financial investments"

import os
import json
import requests
import argparse
from datetime import datetime
from bs4 import BeautifulSoup
from rich.console import Console
from rich.table import Table

console = Console()
parser = argparse.ArgumentParser(add_help=False, prog="Finance", epilog=f"\u200B")

SCRIPT_DIR = os.path.dirname(__file__)
DATA_FILE = SCRIPT_DIR + "/data/data.json"
DATA_FOLDER = SCRIPT_DIR + "/data/"

def banner():
    "Banner for application"

    os.system("clear")
    print("Finance ~ Maxo")
    print()

def fetch_url(url):
    "Handles proper fetching of url"

    try:
        response = requests.get(url)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"Error: {e}")
        exit(1)

    if response is None or response.status_code != 200:
        print(f"Error: Fetching data for {url}.")
        exit(1)

    if "https://www.google.com/finance/quote/" not in url:
        print("Error: Unsupported source of platform.")
        exit(1)
    
    return response

def fetch_data(url) -> dict:
    "Fetches portfolio's data by unique symbol"

    response = fetch_url(url)

    try: 
        soup = BeautifulSoup(response.content, "html.parser")

        company = soup.find("div", class_="zzDege").text
        symbol = soup.find("div", class_="PdOqHc").get_text().removeprefix("Home").strip().split(" ")[0]
        value = soup.find("div", class_="YMlKec fxKbKc").text
        previous_close = soup.find("div", class_="P6K39c").text

        data = {
            "company": company,
            "symbol": symbol,
            "current": value,
            "previous_close": previous_close
        }
    except:
        print("Error: Provided page does not exist.")

    return data

def del_val(id):
    "Delete record by a company id"

    found = False
    portfolio = get_portfolio()
    for record in range(len(portfolio)):
        if str(portfolio[record]["id"]).lower() == str(id).lower():
            portfolio.remove(portfolio[record])
            found = True
    
    if not found:
        print("Error: Record not found.")
        exit(1)
    
    
    with open(DATA_FILE, "w") as file:
        data_json = json.dumps(portfolio)
        file.write(data_json)
    
    print("Sucsess: Record removed successfully.")

def post_url(url):
    "Add new data to the portfolio"

    data = fetch_data(url)

    portfolio = get_portfolio()
    for record in range(len(portfolio)): 
        if portfolio[record]["url"].split("?")[0] == url.split("?")[0]:
            print("Error: Data has already been tracked.") 
            exit(1)
    
    try:
        portion = float(input("Value to track: "))

        if portion <= 0:
            print("Error: Value can not be negative or null.")
            exit(1)
    except:
        print("Error: Unable to parse integer.")
        exit(1)

    share = round((100 / int(''.join(x for x in data["current"] if x.isdigit()))) * portion, 10)
    
    portfolio.append({"id": len(portfolio) + 1, "company": data["company"], "url": url, "portion": portion, "value": data["current"], "share": share, "created": datetime.today().strftime("%d/%m/%Y")})
    
    with open(DATA_FILE, "w") as file:
        data_json = json.dumps(portfolio)
        file.write(data_json)
    
    print("Sucess: Record created successfully.")
    

def get_portfolio() -> list:
    "Returns user's portfolio"

    data = ""

    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as file:
            data_json = file.read()
            if data_json.strip():
                data = json.loads(data_json)
            else:
                data = []
    else:
        os.makedirs(DATA_FOLDER, exist_ok=True)
        with open(DATA_FILE, "w") as file:
            json.dump([], file)
            data = []

    return data

def get_info(id):
    "Get a description of record by a record id"

    with open(DATA_FILE, "r") as file:
        data_json = file.read()
        data = json.loads(data_json)
    
    if id > len(data) or id <= 0:
        print("Error: Id of the record does not exists")
        exit(1)
    
    index = (id - 1)
    company = data[index]["company"]
    url = data[index]["url"]

    response = fetch_url(url)

    try:
        soup = BeautifulSoup(response.content, "html.parser")
        description = soup.find("div", class_="bLLb2d").get_text()

    except:
        print("Error: Provided page does not exist.")

    print(f"Company: {company}")
    print()
    print(description)

def get_news(id):
    "Get a record news by a record id"

    with open(DATA_FILE, "r") as file:
        data_json = file.read()
        data = json.loads(data_json)
    
    if id > len(data) or id <= 0:
        print("Error: Id of the record does not exists")
        exit(1)
    
    index = (id - 1)
    url = data[index]["url"]

    response = fetch_url(url)

    try:
        soup = BeautifulSoup(response.content, "html.parser")
        
        divs = soup.find_all("div", class_="yY3Lee")
        
        for div in divs:
            author = div.find("div", class_="sfyJob").text
            published = div.find("div", class_="Adak").text
            title = div.find("div", class_="Yfwt5").text
            link = div.find("a", href=True)["href"]
            
            print(f"Author: {author}\n" \
                    f"Published: {published}\n" \
                    f"Title: {title}\n" \
                    f"Link: {link}\n")

    except:
        print("Error: Provided page does not exist.")

    
def show_table(portfolio):
    "Show the table from portfolio"

    data = []
    for record in range(len(portfolio)):
        url = portfolio[record]["url"]
        fetched_data = fetch_data(url)
        fetched_data["id"] = str(portfolio[record]["id"])
        fetched_data["value"] = portfolio[record]["value"]
        fetched_data["money"] = str(portfolio[record]["portion"])
        fetched_data["share"] = str(portfolio[record]["share"])
        fetched_data["created"] = portfolio[record]["created"]
        fetched_data["current_money"] = str((float(''.join(x for x in fetched_data["current"] if x.isdigit())) / float(''.join(x for x in fetched_data["value"] if x.isdigit()))) * float(fetched_data["money"]))
        
        statement = str(round( ( ( float(fetched_data["current_money"]) / float(fetched_data["money"]) ) * 100 - 100 ), 5 )) + "%"
        status = "profit" if float(fetched_data["current_money"]) >= float(fetched_data["money"]) else "loss"
        fetched_data["statement"] = f"{statement} ({status})"

        data.append(fetched_data)

    table = Table(show_header = True)
    table.add_column("Id")
    table.add_column("Company")
    table.add_column("Symbol")
    table.add_column("Money")
    table.add_column("Current money")
    table.add_column("Value")
    table.add_column("Current")
    table.add_column("Share")
    table.add_column("Statement")
    table.add_column("Previous close")
    table.add_column("Created")

    for record in data:
        table.add_row(record["id"], record["company"], record["symbol"], record["money"], record["current_money"], record["value"], record["current"], record["share"], record["statement"], record["previous_close"], record["created"])

    console.print(table)


if __name__ == "__main__":
    banner()

    parser.add_argument("-h", "--help", action="help", help="Show this help message and exit")
    parser.add_argument("-p", "--post", nargs=1, help="Add new stock to portfolio by url")
    parser.add_argument("-d", "--del", nargs=1, type=int, help="Delele any value by a record id")
    parser.add_argument("-i", "--info", nargs=1, type=int, help="Get a description of record by a record id")
    parser.add_argument("-n", "--news", nargs=1, type=int, help="Get a record news by a record id")
    args = parser.parse_args()
    
    if args.post:
        post_url(args.post[0])
    elif vars(args).get("del"):
        del_val(vars(args).get("del")[0])
    elif vars(args).get("info"):
        get_info(vars(args).get("info")[0])
    elif vars(args).get("news"):
        get_news(vars(args).get("news")[0])    
    else:
        portfolio = get_portfolio()
        show_table(portfolio)
