#!/usr/bin/python3

import os
import argparse
import string

parser = argparse.ArgumentParser(add_help=True, prog="Caesar cipher", epilog="\u200B")
letters = tuple(string.ascii_lowercase)
# numbers = tuple(string.digits)

def print_output(orginal, new, count):
    print(f"Original: {orginal}\nModified: {new}\n\nChars count: {count}")

def banner():
    os.system("clear")
    print("Caesar cipher ~ Maxo")
    print()


def rotate(data, num=13):
    new_data = "".join(data).lower()
    output = ""

    for x in new_data:
        if x in letters:

            if (letters.index(x, 0, len(letters)) + num <= len(letters) - 1):
                output+=letters[letters.index(x) + num]
            else:
                new_char_index = (letters.index(x, 0, len(letters)) + num) - len(letters)
                output+=letters[new_char_index]

        # elif x in numbers:

        #     if (numbers.index(x, 0, len(numbers)) + num <= len(numbers) - 1):
        #         output+=numbers[numbers.index(x) + num]
        #     else:
        #         new_char_index = (numbers.index(x, 0, len(numbers)) + num) - len(numbers)
        #         output+=numbers[new_char_index]
        
        else:
            output+=x

    print_output(data, output, len(data))

def rotate2(data, num=13):
    new_data = "".join(data).lower()
    output = ""

    for x in new_data:
        if x in letters:

            if (letters.index(x, 0, len(letters)) - num >= 0):
                output+=letters[letters.index(x) - num]
            else:
                new_char_index = (letters.index(x, 0, len(letters)) - num) + len(letters)
                output+=letters[new_char_index]

        # elif x in numbers:

        #     if (numbers.index(x, 0, len(numbers)) - num >= 0):
        #         output+=numbers[numbers.index(x) - num]
        #     else:
        #         new_char_index = (numbers.index(x, 0, len(numbers)) - num) + len(numbers)
        #         output+=numbers[new_char_index]

        else:
            output+=x

    print_output(data, output, len(data))
    

if __name__ == "__main__":
    banner()

    parser.add_argument("-d", '--data', nargs=1, type=str, help="Data for process", required=True)
    args = parser.parse_args()

    if vars(args).get("data"):
        rotate(args.data[0])
